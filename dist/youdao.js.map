{"version":3,"file":"youdao.js","sources":["../src/youdao.js"],"sourcesContent":["// #!/usr/bin/env node\n// 命令行有道翻译\n// http请求\nimport Printer from '@darkobits/lolcatjs'\nimport chalk from 'chalk'\nimport Table from 'cli-table2/src/table'\nimport { program } from 'commander'\nimport Configstore from 'configstore'\nimport figlet from 'figlet'\nimport superagent from 'superagent'\n\nconst conf = new Configstore('youdaoTom')\n\nconst DEFAULT_API_KEYS = {\n    key: 868480929,\n    keyfrom: 'toaijf'\n}\n\nconst key = conf.get('key') || DEFAULT_API_KEYS.key\nconst keyfrom = conf.get('keyfrom') || DEFAULT_API_KEYS.keyfrom\n\nconst packages = require('../package.json')\n\nconst { version: VERSION } = packages\nconst logo = figlet.textSync('Youdao')\nconst logoPrinter = Printer.fromString(\n    `\\n=========================================   \\n 汤姆的youdao翻译${VERSION}\\n\\n${logo}\\n=========================================`\n)\n\nconst validJSON = (json) => {\n    try {\n        JSON.parse(json)\n        return true\n    } catch (err) {\n        return false\n    }\n}\n\nprogram\n    .allowUnknownOption()\n    .version(logoPrinter, '-V, --version')\n    .usage('translator <cmd> [input]')\n\nconst url = `http://fanyi.youdao.com/openapi.do?keyfrom=${keyfrom}&key=${key}&type=data&doctype=json&version=1.1`\n\nprogram\n    .command('set')\n    .description('config key,keyfrom')\n    .requiredOption('-key,--key <string>', 'youdao api key')\n    .requiredOption('-keyfrom,--keyfrom <string>', 'youdao api keyfrom')\n    .action((options) => {\n        console.log('cmd', options, options.key)\n        conf.set('key', options.key)\n        conf.set('keyfrom', options.keyfrom)\n    })\n\nprogram\n    .command('query', { isDefault: true })\n    .description('translate query')\n    .action((cmd, obj) => {\n        const word = obj.args?.join(' ')\n        superagent\n            .get(url)\n            .query({\n                q: word\n            })\n            .end((err, res) => {\n                if (err) {\n                    console.log('excuse me, try again')\n                    return false\n                }\n\n                try {\n                    if (!validJSON(res.text)) {\n                        console.log(`\\n ${chalk.red('有道翻译API出错信息:')}`)\n                        console.log(\n                            `\\n${'💔'.repeat(\n                                3\n                            )}来自您key的翻译API请求异常频繁，为保护其他用户的正常访问，只能暂时禁止您目前key的访问\\n`\n                        )\n\n                        console.log(\n                            `\\n你可以使用 ${chalk.red(\n                                'youdaotom set -key xxx -keyfrom yyy'\n                            )} 命令来配置你自己在网易申请的key和keyfrom,或者几个小时后再尝试，随着本npm包下载的用户数越多，很容易超出网易的限制\\n`\n                        )\n                        return false\n                    }\n                    const data = JSON.parse(res.text)\n                    const result = {}\n                    // 返回的数据处理\n                    if (data.basic) {\n                        result[word] = data.basic.explains\n                    } else if (data.translation) {\n                        result[word] = data.translation\n                    } else {\n                        console.error('error')\n                    }\n                    console.log()\n                    // 输出表格\n                    const table = new Table()\n                    table.push(result)\n                    console.log(table.toString())\n                } catch (error) {\n                    console.log(error.toString())\n                }\n            })\n    })\nif (!process.argv[2]) {\n    console.log(logoPrinter)\n    program.help()\n}\nprogram.parse(process.argv)\n"],"names":["conf","Configstore","DEFAULT_API_KEYS","key","get","keyfrom","packages","require","version","VERSION","logo","figlet","textSync","logoPrinter","Printer","fromString","program","allowUnknownOption","usage","url","command","description","requiredOption","action","options","console","log","set","isDefault","cmd","obj","word","args","_obj$args","join","superagent","query","q","end","err","res","json","JSON","parse","validJSON","text","chalk","red","repeat","data","result","basic","explains","translation","error","table","Table","push","toString","process","argv","help"],"mappings":"yTAWMA,EAAO,IAAIC,UAAY,aAEvBC,EACG,UADHA,EAEO,SAGPC,EAAMH,EAAKI,IAAI,QAAUF,EACzBG,EAAUL,EAAKI,IAAI,YAAcF,EAEjCI,EAAWC,QAAQ,oBAEjBC,QAASC,GAAYH,EACvBI,EAAOC,UAAOC,SAAS,UACvBC,EAAcC,UAAQC,iFACuCN,iBAAcC,kDAYjFM,UACKC,qBACAT,QAAQK,EAAa,iBACrBK,MAAM,4BAEX,IAAMC,uDAAoDd,kBAAeF,yCAEzEa,UACKI,QAAQ,OACRC,YAAY,sBACZC,eAAe,sBAAuB,kBACtCA,eAAe,8BAA+B,sBAC9CC,QAAQC,IACLC,QAAQC,IAAI,MAAOF,EAASA,EAAQrB,KACpCH,EAAK2B,IAAI,MAAOH,EAAQrB,KACxBH,EAAK2B,IAAI,UAAWH,EAAQnB,YAGpCW,UACKI,QAAQ,QAAS,CAAEQ,WAAW,IAC9BP,YAAY,mBACZE,QAAO,CAACM,EAAKC,WACJC,YAAOD,EAAIE,yBAAJC,EAAUC,KAAK,KAC5BC,UACK/B,IAAIe,GACJiB,MAAM,CACHC,EAAGN,IAENO,KAAI,CAACC,EAAKC,QACHD,SACAd,QAAQC,IAAI,yBACL,WAxCRe,eAEXC,KAAKC,MAAMF,IACJ,EACT,MAAOF,UACE,IAuCUK,CAAUJ,EAAIK,aACfpB,QAAQC,iBAAUoB,UAAMC,IAAI,kBAC5BtB,QAAQC,gBACC,KAAKsB,OACN,yDAIRvB,QAAQC,sBACOoB,UAAMC,IACb,+GAGD,MAELE,EAAOP,KAAKC,MAAMH,EAAIK,MACtBK,EAAS,GAEXD,EAAKE,MACLD,EAAOnB,GAAQkB,EAAKE,MAAMC,SACnBH,EAAKI,YACZH,EAAOnB,GAAQkB,EAAKI,YAEpB5B,QAAQ6B,MAAM,SAElB7B,QAAQC,UAEF6B,EAAQ,IAAIC,UAClBD,EAAME,KAAKP,GACXzB,QAAQC,IAAI6B,EAAMG,YACpB,MAAOJ,GACL7B,QAAQC,IAAI4B,EAAMI,mBAIjCC,QAAQC,KAAK,KACdnC,QAAQC,IAAIb,GACZG,UAAQ6C,QAEZ7C,UAAQ2B,MAAMgB,QAAQC"}